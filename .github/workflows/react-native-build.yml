name: React Native Complete Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --------------------------------
  # Install npm dependencies and run
  # the react native tests.
  # --------------------------------
  install-and-test:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v2
      - name: Install npm dependencies
        run: |
          npm ci
      - name: Run tests
        run: |
          npm test

  # --------------------------------
  # Build the android application
  # --------------------------------
  build-android:
    needs: install-and-test
    name: Build and test android application
    runs-on: ubuntu-latest
    env: 
      working-directory: ./android
    steps:
    - uses: actions/checkout@v2
    - name: Install npm dependencies
      run: |
        npm ci
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      working-directory: ${{env.working-directory}}
    - name: Build with Gradle
      run: ./gradlew build
      working-directory: ${{env.working-directory}}

  # --------------------------------
  # Build the ios application and 
  # run the tests on a simulator.
  # --------------------------------
  build-ios:
    needs: install-and-test
    name: Build and test default scheme using any available iPhone simulator
    runs-on: macos-latest
    env: 
      working-directory: ./ios

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install npm dependencies
        run: npm install
      - name: Install pod dependencies
        run: pod install
        working-directory: ${{env.working-directory}}
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
        working-directory: ${{env.working-directory}}
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
        working-directory: ${{env.working-directory}}
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          device=`instruments -s -devices | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}'`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
        working-directory: ${{env.working-directory}}

  # --------------------------------
  # Build the web application and run
  # the tests
  # --------------------------------
  build-web:
    needs: install-and-test
    name: Build and test the web application
    runs-on: ubuntu-latest
    env:
      working-directory: ./web
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Set Node.js 
      uses: actions/setup-node@v1
      with:
        version: 12.x
    - name: Install npm dependencies
      run: npm ci
    - name: Generate client assets
      run: npm run web:prod
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{env.working-directory}}
    - name: Build
      run: dotnet build --no-restore
      working-directory: ${{env.working-directory}}
    - name: Test
      run: dotnet test --no-build --verbosity normal
      working-directory: ${{env.working-directory}}

  # --------------------------------
  # Build the api and test the api
  # --------------------------------
  build-api:
    needs: install-and-test
    name: Build the api
    runs-on: ubuntu-latest
    env:
      working-directory: ./api
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ${{env.working-directory}}
    - name: Build
      run: dotnet build --no-restore
      working-directory: ${{env.working-directory}}
    - name: Test
      run: dotnet test --no-build --verbosity normal
      working-directory: ${{env.working-directory}}
